add_newline = false

# custom module for jj status
[custom.jj]
description = 'Current jj status'
# A thematic symbol for Jujutsu. The space at the end is for padding.
symbol = "ðŸ¥‹ "
# This command is your original logic, it works perfectly.
command = '''
jj root > /dev/null && jj log --revisions "@" --no-pager --no-graph --ignore-working-copy --color always --limit 1 --template '
  separate(" ",
    change_id.shortest(4),
    bookmarks,
    concat(
      if(conflict, "ðŸ’¥"),
      if(divergent, "ðŸš§"),
      if(hidden, "ðŸ‘»"),
      if(immutable, "ðŸ”’"),
    ),
    raw_escape_sequence("\x1b[1;32m") ++ if(empty, "(empty)"),
    raw_escape_sequence("\x1b[1;32m") ++ if(description.first_line().len() == 0,
      "(no description set)",
      if(description.first_line().substr(0, 29) == description.first_line(),
        description.first_line(),
        description.first_line().substr(0, 29) ++ "â€¦",
      )
    ) ++ raw_escape_sequence("\x1b[0m"),
  )
'
'''
# Use Starship's format string to combine the symbol and the command's output.
# The output of the `command` above is captured in the `$output` variable.
format = '[$symbol$output]($style) '
style = "blue bold"
# This condition ensures the module only runs inside a jj repo.
when = 'test -d .jj'
ignore_timeout = true

[git_status]
style = "purple bold"
staged = "âœ”"
modified = "!"
untracked = "+"
conflicted = "âœ–"

[git_branch]
format = '[$symbol$branch(:$remote_branch)]($style) '

[golang]
format = '[î˜§ $version](bold cyan) '

[docker_context]
symbol = "ïŒˆ"
style = "bold blue"

[kubernetes]
symbol = 'â˜¸ '
disabled = true
detect_files = ['Dockerfile']
format = '[$symbol$context( \($namespace\))]($style) '
